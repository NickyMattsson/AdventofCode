calib = CT/obs_ct
PD_calib = PD*calib
lines(CT_year,PD_calib,lty=3)
lines(CT_years,rep(mean(PD_calib),length(CT_years)),lty=4)
amp.obs/amp
t = seq(0,5,by=0.1)
dW=0.1*rnorm(lenght(t)-1)
dW=0.1*rnorm(length(t)-1)
W=c(0,cumsum(dW))
x = cos(t+W)
y = sin(t+W)
plot(x,y)
t = seq(0,5,by=0.01)
dW=0.01*rnorm(length(t)-1)
W=c(0,cumsum(dW))
x = cos(t+W)
y = sin(t+W)
plot(x,y)
t = seq(0,2*pi,by=0.1)
dW=0.01*rnorm(length(t)-1)
W=c(0,cumsum(dW))
x = cos(t+W)
y = sin(t+W)
plot(x,y)
t = seq(0,2*pi,by=0.01)
dW=0.01*rnorm(length(t)-1)
W=c(0,cumsum(dW))
x = cos(t+W)
y = sin(t+W)
plot(x,y)
test = data.frame(x=x,y=y)
test
write_xlsx(test,"/Users/jb0953/Desktop/sim.xlsx")
library("writexl")
write_xlsx(test,"/Users/jb0953/Desktop/sim.xlsx")
dW=sqrt(0.01)*rnorm(length(t)-1)
W=c(0,cumsum(dW))
x = cos(t+W)
y = sin(t+W)
test = data.frame(x=x,y=y)
write_xlsx(test,"/Users/jb0953/Desktop/sim.xlsx")
replicate(3, ggplot(), FALSE)
library(ggplot2)
replicate(3, ggplot(), FALSE)
?replicate
a=0:100
library(dplyr)
a %>% filter(between(a, quantile(a, .01), quantile(a, .99)))
a %>% as.data.frame() %>% filter(between(a, quantile(a, .01), quantile(a, .99)))
a %>% as.data.frame() %>% filter(between(a, quantile(a, .01), quantile(a, .99))) %>% as.numeric()
a %>% as.data.frame() %>% filter(between(a, quantile(a, .01), quantile(a, .99))) %>% pull()
a = sort(rnorm(1e4))
a
a.bin = discretize(a,breaks=10)
arules::discretize
install.packages(arules)
a.bin = discretize(a,breaks=10)
discretize
a.bin = hist(a,plot = FALSE)
a.bin
a.bin = hist(a,plot = FALSE,breaks = 10) %>%
dplyr::select(breaks)
library(tidyverse)
a.bin = hist(a,plot = FALSE,breaks = 10) %>%
dplyr::select(breaks)
a.bin = hist(a,plot = FALSE,breaks = 10) %>%
dplyr::pull(breaks)
a.hist = hist(a,plot = FALSE,breaks = 10) %>%
a.bins = a.hist$
a.hist
a.hist = hist(a,plot = FALSE,breaks = 10)
a.bins = a.hist$
breaks
a.hist
a.bins = a.hist$breaks
a.bins
a = sort(rnbinom(n=1e4))
a = sort(rnbinom(1e4))
a = sort((rnbinom(n =1e4, prob = 0.5, size = 10)-5)/2)
b = sort((rnbinom(n =1e4, prob = 0.5, size = 10)-5)/2)
a = sort(rnorm(1e4))
a.hist = hist(a,plot = FALSE,breaks = 10)
a.bins = a.hist$breaks
b = sort((rnbinom(n =1e4, prob = 0.5, size = 10)-5)/2)
a.hist = hist(b,plot = FALSE,breaks = a.bins)
a.bins = c(-Inf,a.hist$breaks,Inf)
a.hist = hist(b,plot = FALSE,breaks = a.bins)
a = sort(rnorm(1e4))
a.hist = hist(a,plot = FALSE,breaks = 10)
a.bins = c(-Inf,a.hist$breaks,Inf)
b = sort((rnbinom(n =1e4, prob = 0.5, size = 10)-5)/2)
b.hist = hist(b,plot = FALSE,breaks = a.bins)
b.counts = b.hist$counts
b.counts
a.hist = hist(a,plot = FALSE,breaks = 10)
a.bins = c(-Inf,a.hist$breaks[2:length(a.hist$breaks)],Inf)
b = sort((rnbinom(n =1e4, prob = 0.5, size = 10)-5)/2)
b.hist = hist(b,plot = FALSE,breaks = a.bins)
b.counts = b.hist$counts
b.counts
a.bins = c(-Inf,a.hist$breaks[2:length(a.hist$breaks)-1],Inf)
b = sort((rnbinom(n =1e4, prob = 0.5, size = 10)-5)/2)
b.hist = hist(b,plot = FALSE,breaks = a.bins)
b.counts = b.hist$counts
b.counts
b.hist = hist(b,breaks = a.bins)
b = sort((rnbinom(n =1e4, prob = 0.5, size = 10)-5)/2)
b.hist = hist(b,breaks = a.bins)
seed-to-soil = table.read("2642418175 2192252668 3835256
2646253431 2276158914 101631202
2640809144 3719389865 1609031
2439110058 2377790116 121628096
439727986 2712085714 392957193
993018128 1316992003 327657967
832685179 1875058987 50438969
2796039666 0 1107546829
182253984 3569317158 150072707
2747884633 1826903954 48155033
2268424297 3406848659 162468499
0 1644649970 182253984
1794130013 2499418212 105266207
2560738154 2196087924 80070990
1512587867 1925497956 72096972
2094053960 3729216158 174370337
1320676095 3105042907 191911772
1899396220 1997594928 194657740
2430892796 3720998896 8217262
1584684839 1107546829 209445174
332326691 2604684419 107401295
883124148 3296954679 109893980")
seed-to-soil = read.table("2642418175 2192252668 3835256
2646253431 2276158914 101631202
2640809144 3719389865 1609031
2439110058 2377790116 121628096
439727986 2712085714 392957193
993018128 1316992003 327657967
832685179 1875058987 50438969
2796039666 0 1107546829
182253984 3569317158 150072707
2747884633 1826903954 48155033
2268424297 3406848659 162468499
0 1644649970 182253984
1794130013 2499418212 105266207
2560738154 2196087924 80070990
1512587867 1925497956 72096972
2094053960 3729216158 174370337
1320676095 3105042907 191911772
1899396220 1997594928 194657740
2430892796 3720998896 8217262
1584684839 1107546829 209445174
332326691 2604684419 107401295
883124148 3296954679 109893980")
seed-to-soil = read.table(text =
"2642418175 2192252668 3835256
2646253431 2276158914 101631202
2640809144 3719389865 1609031
2439110058 2377790116 121628096
439727986 2712085714 392957193
993018128 1316992003 327657967
832685179 1875058987 50438969
2796039666 0 1107546829
182253984 3569317158 150072707
2747884633 1826903954 48155033
2268424297 3406848659 162468499
0 1644649970 182253984
1794130013 2499418212 105266207
2560738154 2196087924 80070990
1512587867 1925497956 72096972
2094053960 3729216158 174370337
1320676095 3105042907 191911772
1899396220 1997594928 194657740
2430892796 3720998896 8217262
1584684839 1107546829 209445174
332326691 2604684419 107401295
883124148 3296954679 109893980")
seeds = c(2906422699,6916147,3075226163,146720986,689152391,244427042,279234546,
382175449,1105311711,2036236,3650753915,127044950,3994686181,93904335,
1450749684,123906789,2044765513,620379445,1609835129,60050954)
seed-to-soil = read.table(text =
"2642418175 2192252668 3835256
2646253431 2276158914 101631202
2640809144 3719389865 1609031
2439110058 2377790116 121628096
439727986 2712085714 392957193
993018128 1316992003 327657967
832685179 1875058987 50438969
2796039666 0 1107546829
182253984 3569317158 150072707
2747884633 1826903954 48155033
2268424297 3406848659 162468499
0 1644649970 182253984
1794130013 2499418212 105266207
2560738154 2196087924 80070990
1512587867 1925497956 72096972
2094053960 3729216158 174370337
1320676095 3105042907 191911772
1899396220 1997594928 194657740
2430892796 3720998896 8217262
1584684839 1107546829 209445174
332326691 2604684419 107401295
883124148 3296954679 109893980")
seed.to.soil = read.table(text =
"2642418175 2192252668 3835256
2646253431 2276158914 101631202
2640809144 3719389865 1609031
2439110058 2377790116 121628096
439727986 2712085714 392957193
993018128 1316992003 327657967
832685179 1875058987 50438969
2796039666 0 1107546829
182253984 3569317158 150072707
2747884633 1826903954 48155033
2268424297 3406848659 162468499
0 1644649970 182253984
1794130013 2499418212 105266207
2560738154 2196087924 80070990
1512587867 1925497956 72096972
2094053960 3729216158 174370337
1320676095 3105042907 191911772
1899396220 1997594928 194657740
2430892796 3720998896 8217262
1584684839 1107546829 209445174
332326691 2604684419 107401295
883124148 3296954679 109893980")
seed.to.soil
soil.to.fertilizer = read.table(text =
"1486714106 1238503832 507721065
637816737 149749818 437782225
1182620803 2675299784 39248251
3597657865 3775149764 175910008
3773567873 3962939269 152626038
3000531163 3487988055 287161709
1221869054 1043346723 160011771
1417026163 2117544922 69687943
3584687325 3000531163 12970540
3938073408 3484898614 3089441
4154999630 4115565307 65971879
3941162849 3087497490 97611489
427771233 2337712270 210045504
2132339212 587532043 265793132
4220971509 3013501703 73995787
3926193911 3951059772 11879497
3287692872 3271363394 97309928
3385002800 3185108979 86254415
277291828 2187232865 150479405
1075598962 1746224897 107021841
1994435171 2714548035 137904041
2398132344 1853246738 264298184
4038774338 3368673322 116225292
0 2547757774 127542010
127542010 0 149749818
2662430528 853325175 190021548
3471257215 4181537186 113430110
1381880825 1203358494 35145338")
fertilizer.to.water = read.table(text =
"1335715777 3551297863 15572557
3058091197 394986221 12806050
3214739636 1272556544 43474947
2194583281 3796992984 5908188
1795111705 3569682225 74131978
2761913827 2554114847 40731321
163407858 97246509 38153094
201560952 135399603 99530224
2940391010 2113359463 79167148
1379193735 3838257748 62489021
605586814 1626110823 487248640
1210765693 2673739436 122138279
2657443462 2449644482 104470365
1332903972 3566870420 2811805
1092835454 1468044840 52984152
3612861396 610695664 247630343
4056909324 407792271 18897075
1351288334 3900746769 27905401
2200491469 2958550754 43716751
3070897247 426689346 143842389
2563990948 2356191968 93452514
3860491739 2192526611 17573017
430342797 3077819515 14543393
1441682756 3140553634 112714328
1554397084 1521028992 105081831
1659478915 858326007 135632790
1195705829 4279907432 15059864
4075806399 3372259011 179038852
2490006393 570531735 40163929
2244208220 2795877715 126807124
3272482070 3939528106 340379326
444886190 3092362908 48190726
1145819606 3027933292 49886223
2371015344 3253267962 118991049
3878064756 3002267505 25665787
1869243683 993958797 278597747
3258214583 1316031491 14267487
2802645148 1330298978 137745862
2563752764 2673501252 238184
3903730543 3643814203 153178781
97246509 234929827 66161349
2158717366 2922684839 35865915
2147841430 3928652170 10875936
3019558158 2594846168 38533039
493076916 2210099628 112509898
2530170322 2322609526 33582442
394986221 3802901172 35356576
4254845251 2633379207 40122045")
setwd("~/Advent/AdventofCode/2023")
source(input.R)
###### Dec. 5
##### Del 1
#Hent data
source(input5.R)
###### Dec. 5
##### Del 1
#Hent data
source("input5.R")
View(fertilizer.to.water)
map = seed.to.soil
map.sorted = map[order(map$V1)]
map
map.sorted = map[order(map$V1),]
map.sorted
mapping = function(val.in,map){
#sort
map.sorted = map[order(map$V1),]
for (i in 1:nrow(map.sorted)){
if (val.in > map.sorted$V1[i] & val.in < map.sorted$V1[i]+map.sorted$V2[i]){
return(val.in - map.sorted$V1[i] + map.sorted$V2[i])
}
if (val.in < map.sorted$V1[i]){
break
}
return(val.in)
}
}
mapping(2906422699,map)
map.sorted
val.in = seeds[1]
val.in
map.sorted = map[order(map$V1),]
i = nrow(map.sorted)
val.in > map.sorted$V1[i]
map.sorted$V1[i]+map.sorted$V3[i]
val.in < map.sorted$V1[i]+map.sorted$V3[i]
val.in - map.sorted$V1[i] + map.sorted$V2[i]
mapping(val.in,map)
mapping = function(val.in,map){
#sort
map.sorted = map[order(map$V1),]
for (i in 1:nrow(map.sorted)){
if (val.in > map.sorted$V1[i] & val.in < map.sorted$V1[i]+map.sorted$V3[i]){
return(val.in - map.sorted$V1[i] + map.sorted$V2[i])
}
if (val.in < map.sorted$V1[i]){
break
}
return(val.in)
}
}
mapping(val.in,map)
mapping = function(val.in,map){
#sort
map.sorted = map[order(map$V1),]
for (i in 1:nrow(map.sorted)){
if (val.in > map.sorted$V1[i] & val.in < map.sorted$V1[i]+map.sorted$V3[i]){
return(val.in - map.sorted$V1[i] + map.sorted$V2[i])
}
if (val.in < map.sorted$V1[i]){
break
}
return(val.in)
}
}
(val.in > map.sorted$V1[i] & val.in < map.sorted$V1[i]+map.sorted$V3[i])
val.in - map.sorted$V1[i] + map.sorted$V2[i]
val.in < map.sorted$V1[i]
mapping = function(val.in,map){
#sort
map.sorted = map[order(map$V1),]
for (i in 1:nrow(map.sorted)){
if (val.in > map.sorted$V1[i] & val.in < map.sorted$V1[i]+map.sorted$V3[i]){
return(val.in - map.sorted$V1[i] + map.sorted$V2[i])
}
if (val.in < map.sorted$V1[i]){
break
}
return(val.in)
}
}
mapping(val.in,map)
mapping = function(val.in,map){
#sort
map.sorted = map[order(map$V1),]
for (i in 1:nrow(map.sorted)){
if (val.in > map.sorted$V1[i] & val.in < map.sorted$V1[i]+map.sorted$V3[i]){
out = val.in - map.sorted$V1[i] + map.sorted$V2[i]
return(out)
}
if (val.in < map.sorted$V1[i]){
break
}
return(val.in)
}
}
mapping(val.in,map)
mapping = function(val.in,map){
#sort
map.sorted = map[order(map$V1),]
browser()
#Check each map
for (i in 1:nrow(map.sorted)){
#Mapping found
if (val.in > map.sorted$V1[i] & val.in < map.sorted$V1[i]+map.sorted$V3[i]){
out = val.in - map.sorted$V1[i] + map.sorted$V2[i]
return(out)
}
#Early break
if (val.in < map.sorted$V1[i]){
break
}
# no mapping found
return(val.in)
}
}
mapping(val.in,map)
(val.in < map.sorted$V1[i])
mapping = function(val.in,map){
#sort
map.sorted = map[order(map$V1),]
browser()
#Check each map
for (i in 1:nrow(map.sorted)){
#Mapping found
if (val.in > map.sorted$V1[i] & val.in < map.sorted$V1[i]+map.sorted$V3[i]){
out = val.in - map.sorted$V1[i] + map.sorted$V2[i]
return(out)
}
#Early break
if (val.in < map.sorted$V1[i]){
break
}
}
# no mapping found
return(val.in)
}
mapping(val.in,map)
mapping = function(val.in,map){
#sort
map.sorted = map[order(map$V1),]
#Check each map
for (i in 1:nrow(map.sorted)){
#Mapping found
if (val.in > map.sorted$V1[i] & val.in < map.sorted$V1[i]+map.sorted$V3[i]){
out = val.in - map.sorted$V1[i] + map.sorted$V2[i]
return(out)
}
#Early break
if (val.in < map.sorted$V1[i]){
break
}
}
# no mapping found
return(val.in)
}
mapping(val.in,map)
find.loc = function(seed){
soil = mapping(seed,seed.to.soil)
fertilizer = mapping(soil,soil.to.fertilizer)
water = mapping(fertilizer,fertilizer.to.water)
light = mapping(water,water.to.light)
temperature = mapping(light,light.to.temperature)
humidity = mapping(temperature,temperature.to.humidity)
location = mapping(humidity,humidity.to.location)
return(location)
}
mapping(val.in,map)
val.in %>% find.loc()
'library(stringi)
library(tidyverse)
###### 1. December
#### Del 1
data = read.csv("input.txt",header=FALSE) %>% pull()
first = stringi::stri_extract_first_regex(data, "[0-9]")
last = stringi::stri_extract_last_regex(data, "[0-9]")
total = paste0(first,last) %>% as.numeric() %>% sum()
#### Del 2. FML
numbers_verb = c("one", "two", "three", "four", "five", "six", "seven", "eight", "nine")
numbers_num = 1:9
translation = data.frame(num = numbers_num, verb = numbers_verb)
data_trans = data #init
for (j in length(data)){
min_idx = Inf
min_idx_num = 0
for (i in 1:nrow(translation)){
idx = grep(x = data_trans[10],pattern=translation$verb[1])
if (idx<min_idx){
min_idx=idx
min_idx_num =i
}
}
data_trans[j] = gsub(x = data_trans[j],pattern=translation$verb[min_idx_num],replacement = translation$num[min_idx_num])
}
first = stringi::stri_extract_first_regex(data_trans_left, "[0-9]")
library(stringi)
library(tidyverse)
)
)
)
)
)
)
)
)
)))))))))))))))))))))))))))))))))))))
quit
